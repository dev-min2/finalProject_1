1. 동기식 전송 vs 비동기식 전송방식
 - 동기 : 작업이 직렬적(작업을 요청한 순서대로 처리되며, 이전 작업이 끝나기 전까지 새로운 작업이 진행되지 않으며, 완료 결과는 호출한 자리에서만 받을 수 있음 )으로 처리
 - 비동기 : 작업이 병렬적(작업 요청시 이전 작업의 완료여부와 관계없이 작업을 진행(작업 요청순서와 결과순서는 달라질 수 있음). 완료된 결과는 보통 콜백형태로 반환)으로 처리
 - 블로킹 : 쓰레드가 특정 함수를 호출할 때 해당 쓰레드의 제어권을 넘겨 해당 함수가 반환 되기전까지 쓰레드가 BLOCK 되는것을 의미.
 - 논블로킹 : 쓰레드가 특정 함수를 호출할 때 해당 쓰레드의 제어권을 거의 즉시 돌려받아 BLOCK되지 않는것을 의미

동기식 전송 : 거의 모든 동기식처리는 블로킹+동기의 조합이기에 동기 작업이 완료되기전까지 해당 쓰레드는 응답이 오기전까지 Block된 상태에 빠짐.
장점 : 직관적이고 코드작성이 편리. 또한 요청과 응답의 순서가 동일하기에 별도의 후처리가 불필요함.
단점 : 한번에 요청이 몰리면 직렬적으로 처리되는 동기방식은 병렬적으로 처리하는 비동기방식보다는 비효율적.

비동기식 전송 : (비동기식 처리는 블로킹과 사용되는 경우를 본적이없음) 논블로킹+비동기 조합에서는 비동기 작업을 요청 후, block 되지않고 다른 작업을 진행가능.
장점 : 요청한 작업이 이전 작업 완료 여부와 관계없이 병렬적으로 처리되기에 동기방식보다 효율적인 작업 처리가 가능.
단점 : 직관적이지 않고, 비동기 작업의 완료를 콜백등의 형태로 후처리가 진행되어야 함. 또한 요청한 작업의 결과가 요청한 순서대로 완료된다는 보장이 없으며, 특히 비동기 작업 요청 후

2. ajax(Asynchronous Javascript And Xml)
자바스크립트에서 서버에 비동기방식으로 요청하는 기술
주로 웹페이지를 리로드하지않고, 일부분을 갱신하기 위해 사용.

3. rest와 restful이란?
REST : 자원을 이름(URI -> 자원을 식별하기 위한 문자열 값)으로 구분해 해당 자원의 상태(정보)를 주고받는 모든 것을 의미하며, URI를 통해 자원을 명시하고 HTTP Method를 통해 해당 자원에 대한 행위(CRUD)를 적용하는 것. 별도의 기술이 아닌 기존의 HTTP 프로토콜을 이용한 아키텍처를 의미.

장점 : 해당 자원의 의미와 행위에 대한 의도를 이해하기 쉬움
단점 : 뭔가 지키기어려움;

restful
rest의 원리를 잘 따른 시스템.